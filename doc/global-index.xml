<reference id="indexes">
  <title>Index</title>
  
  <refentry id="clsql-index">
    <refnamediv>
      <refname>Alphabetical Index for package CLSQL</refname>  
      <refpurpose>Clickable index of all symbols</refpurpose>
    </refnamediv>
    
    <refsect1>
      <simplelist columns="2">
    
    <!-- VARIABLES --> 

    <member><link hovertext="variable *BACKEND-WARNING-BEHAVIOR* is of type T" linkend="backend-warning-behavior">*BACKEND-WARNING-BEHAVIOR*</link></member>
    <member><link hovertext="variable *CACHE-TABLE-QUERIES-DEFAULT* is of type T" linkend="cache-table-queries-default">*CACHE-TABLE-QUERIES-DEFAULT*</link></member>
    <member><link hovertext="variable *CONNECT-IF-EXISTS* is of type T" linkend="connect-if-exists">*CONNECT-IF-EXISTS*</link></member>
    <member><link hovertext="variable *DB-AUTO-SYNC* is of type T" linkend="db-auto-sync">*DB-AUTO-SYNC*</link></member>
    <member><link hovertext="variable *DEFAULT-DATABASE* is of type T" linkend="default-database">*DEFAULT-DATABASE*</link></member>
    <member><link hovertext="variable *DEFAULT-DATABASE-TYPE* is of type T" linkend="default-database-type">*DEFAULT-DATABASE-TYPE*</link></member>
    <member><link hovertext="variable *DEFAULT-UPDATE-OBJECTS-MAX-LEN* is of type T" linkend="default-update-objects-max-len">*DEFAULT-UPDATE-OBJECTS-MAX-LEN*</link></member>
    <member><link hovertext="variable *DEFAULT-VARCHAR-LENGTH* is of type T [parameter]" linkend="default-varchar-length">*DEFAULT-VARCHAR-LENGTH*</link></member>
    <member><link hovertext="variable *INITIALIZED-DATABASE-TYPES* is of type T" linkend="initialized-database-types">*INITIALIZED-DATABASE-TYPES*</link></member>

    <!-- OTHER SYMBOLS IN ALPHABETICAL ORDER --> 

    <member><link hovertext="(ADD-SQL-STREAM STREAM &amp;KEY (TYPE :COMMANDS) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="add-sql-stream">ADD-SQL-STREAM</link></member>
    <member><link hovertext="(ADD-TRANSACTION-COMMIT-HOOK DATABASE COMMIT-HOOK) [function]" linkend="add-transaction-commit-hook">ADD-TRANSACTION-COMMIT-HOOK</link></member>
    <member><link hovertext="(ADD-TRANSACTION-ROLLBACK-HOOK DATABASE ROLLBACK-HOOK) [function]" linkend="add-transaction-rollback-hook">ADD-TRANSACTION-ROLLBACK-HOOK</link></member>
    <member><link hovertext="(ATTRIBUTE-TYPE ATTRIBUTE TABLE &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="attribute-type">ATTRIBUTE-TYPE</link></member>
    <member><link hovertext="(BIND-PARAMETER PREPARED-STMT POSITION VALUE) [function]" linkend="bind-parameter">BIND-PARAMETER</link></member>
    <member><link hovertext="(CACHE-TABLE-QUERIES TABLE &amp;KEY (ACTION NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="cache-table-queries">CACHE-TABLE-QUERIES</link></member>
    <member><link hovertext="(COMMIT &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="commit">COMMIT</link></member>
    <member><link hovertext="(CONNECT CONNECTION-SPEC &amp;KEY (IF-EXISTS *CONNECT-IF-EXISTS*) (MAKE-DEFAULT T) (POOL NIL) (DATABASE-TYPE *DEFAULT-DATABASE-TYPE*)) [function]" linkend="connect">CONNECT</link></member>
    <member><link hovertext="(CONNECTED-DATABASES ) [function]" linkend="connected-databases">CONNECTED-DATABASES</link></member>
    <member><link hovertext="(CREATE-DATABASE CONNECTION-SPEC &amp;KEY DATABASE-TYPE) [function]" linkend="create-database">CREATE-DATABASE</link></member>
    <member><link hovertext="(CREATE-INDEX NAME &amp;KEY ON (UNIQUE NIL) ATTRIBUTES (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="create-index">CREATE-INDEX</link></member>
    <member><link hovertext="(CREATE-LARGE-OBJECT &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="create-large-object">CREATE-LARGE-OBJECT</link></member>
    <member><link hovertext="(CREATE-SEQUENCE NAME &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="create-sequence">CREATE-SEQUENCE</link></member>
    <member><link hovertext="(CREATE-TABLE NAME DESCRIPTION &amp;KEY (DATABASE *DEFAULT-DATABASE*) (CONSTRAINTS NIL) (TRANSACTIONS T)) [function]" linkend="create-table">CREATE-TABLE</link></member>
    <member><link hovertext="(CREATE-VIEW NAME &amp;KEY AS COLUMN-LIST (WITH-CHECK-OPTION NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="create-view">CREATE-VIEW</link></member>
    <member><link hovertext="(CREATE-VIEW-FROM-CLASS VIEW-CLASS-NAME &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="create-view-from-class">CREATE-VIEW-FROM-CLASS</link></member>
    <member><link hovertext="(defclass DATABASE ()(...))" linkend="database">DATABASE</link></member>
    <member><link hovertext="(DATABASE-NAME (OBJ DATABASE)) [reader]" linkend="database-name">DATABASE-NAME</link></member>
    <member><link hovertext="(DATABASE-TYPE (OBJ DATABASE)) [reader]" linkend="database-type">DATABASE-TYPE</link></member>
    <member><link hovertext="(DEF-VIEW-CLASS CLASS SUPERS SLOTS &amp;REST CL-OPTIONS) [macro]" linkend="def-view-class">DEF-VIEW-CLASS</link></member>
    <member><link hovertext="(DELETE-INSTANCE-RECORDS OBJECT) [generic]" linkend="delete-instance-records">DELETE-INSTANCE-RECORDS</link></member>
    <member><link hovertext="(DELETE-LARGE-OBJECT OBJECT-ID &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="delete-large-object">DELETE-LARGE-OBJECT</link></member>
    <member><link hovertext="(DELETE-RECORDS &amp;KEY (FROM NIL) (WHERE NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="delete-records">DELETE-RECORDS</link></member>
    <member><link hovertext="(DELETE-SQL-STREAM STREAM &amp;KEY (TYPE :COMMANDS) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="delete-sql-stream">DELETE-SQL-STREAM</link></member>
    <member><link hovertext="(DESCRIBE-TABLE TABLE &amp;KEY DATABASE) [generic]" linkend="describe-table">DESCRIBE-TABLE</link></member>
    <member><link hovertext="(DESTROY-DATABASE CONNECTION-SPEC &amp;KEY DATABASE-TYPE) [function]" linkend="destroy-database">DESTROY-DATABASE</link></member>
    <member><link hovertext="(DISABLE-SQL-READER-SYNTAX ) [macro]" linkend="disable-sql-reader-syntax">DISABLE-SQL-READER-SYNTAX</link></member>
    <member><link hovertext="(DISCONNECT &amp;KEY (DATABASE *DEFAULT-DATABASE*) (ERROR NIL)) [function]" linkend="disconnect">DISCONNECT</link></member>
    <member><link hovertext="(DISCONNECT-POOLED &amp;OPTIONAL CLEAR) [function]" linkend="disconnect-pooled">DISCONNECT-POOLED</link></member>
    <member><link hovertext="(DO-QUERY &amp;KEY (DATABASE '*DEFAULT-DATABASE*) (RESULT-TYPES :AUTO) &amp;REST QUERY-EXPRESSION &amp;BODY BODY) [macro]" linkend="do-query">DO-QUERY</link></member>
    <member><link hovertext="(DROP-INDEX NAME &amp;KEY (IF-DOES-NOT-EXIST :ERROR) (ON NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="drop-index">DROP-INDEX</link></member>
    <member><link hovertext="(DROP-SEQUENCE NAME &amp;KEY (IF-DOES-NOT-EXIST :ERROR) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="drop-sequence">DROP-SEQUENCE</link></member>
    <member><link hovertext="(DROP-TABLE NAME &amp;KEY (IF-DOES-NOT-EXIST :ERROR) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="drop-table">DROP-TABLE</link></member>
    <member><link hovertext="(DROP-VIEW NAME &amp;KEY (IF-DOES-NOT-EXIST :ERROR) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="drop-view">DROP-VIEW</link></member>
    <member><link hovertext="(DROP-VIEW-FROM-CLASS VIEW-CLASS-NAME &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="drop-view-from-class">DROP-VIEW-FROM-CLASS</link></member>
    <member><link hovertext="(ENABLE-SQL-READER-SYNTAX ) [macro]" linkend="enable-sql-reader-syntax">ENABLE-SQL-READER-SYNTAX</link></member>
    <member><link hovertext="(EXECUTE-COMMAND EXPRESSION &amp;KEY DATABASE) [generic]" linkend="execute-command">EXECUTE-COMMAND</link></member>
    <member><link hovertext="(FIND-DATABASE DATABASE &amp;KEY (ERRORP T) (DB-TYPE NIL)) [function]" linkend="find-database">FIND-DATABASE</link></member>
    <member><link hovertext="(FOR-EACH-ROW &amp;KEY FROM ORDER-BY WHERE DISTINCT LIMIT &amp;REST FIELDS &amp;BODY BODY) [macro]" linkend="for-each-row">FOR-EACH-ROW</link></member>
    <member><link hovertext="(FREE-PREPARED-SQL PREPARED-STMT) [function]" linkend="free-prepared-sql">FREE-PREPARED-SQL</link></member>
    <member><link hovertext="(IN-TRANSACTION-P &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="in-transaction-p">IN-TRANSACTION-P</link></member>
    <member><link hovertext="(INDEX-EXISTS-P NAME &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="index-exists-p">INDEX-EXISTS-P</link></member>
    <member><link hovertext="(INITIALIZE-DATABASE-TYPE &amp;KEY (DATABASE-TYPE *DEFAULT-DATABASE-TYPE*)) [function]" linkend="initialize-database-type">INITIALIZE-DATABASE-TYPE</link></member>
    <member><link hovertext="(INSERT-RECORDS &amp;KEY (INTO NIL) (ATTRIBUTES NIL) (VALUES NIL) (AV-PAIRS NIL) (QUERY NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="insert-records">INSERT-RECORDS</link></member>
    <member><link hovertext="(INSTANCE-REFRESHED OBJECT) [generic]" linkend="instance-refreshed">INSTANCE-REFRESHED</link></member>
    <member><link hovertext="(LIST-ATTRIBUTE-TYPES TABLE &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-attribute-types">LIST-ATTRIBUTE-TYPES</link></member>
    <member><link hovertext="(LIST-ATTRIBUTES NAME &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-attributes">LIST-ATTRIBUTES</link></member>
    <member><link hovertext="(LIST-CLASSES &amp;KEY (TEST #'IDENTITY) (ROOT-CLASS (FIND-CLASS 'STANDARD-DB-OBJECT)) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-classes">LIST-CLASSES</link></member>
    <member><link hovertext="(LIST-DATABASES CONNECTION-SPEC &amp;KEY DATABASE-TYPE) [function]" linkend="list-databases">LIST-DATABASES</link></member>
    <member><link hovertext="(LIST-INDEXES &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-indexes">LIST-INDEXES</link></member>
    <member><link hovertext="(LIST-SEQUENCES &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-sequences">LIST-SEQUENCES</link></member>
    <member><link hovertext="(LIST-SQL-STREAMS &amp;KEY (TYPE :COMMANDS) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-sql-streams">LIST-SQL-STREAMS</link></member>
    <member><link hovertext="(LIST-TABLE-INDEXES TABLE &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-table-indexes">LIST-TABLE-INDEXES</link></member>
    <member><link hovertext="(LIST-TABLES &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-tables">LIST-TABLES</link></member>
    <member><link hovertext="(LIST-VIEWS &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="list-views">LIST-VIEWS</link></member>
    <member><link hovertext="(LOCALLY-DISABLE-SQL-READER-SYNTAX ) [macro]" linkend="locally-disable-sql-reader-syntax">LOCALLY-DISABLE-SQL-READER-SYNTAX</link></member>
    <member><link hovertext="(LOCALLY-ENABLE-SQL-READER-SYNTAX ) [macro]" linkend="locally-enable-sql-reader-syntax">LOCALLY-ENABLE-SQL-READER-SYNTAX</link></member>
    <member><link hovertext="(LOOP FOR AS TUPLES)" linkend="loop-tuples">LOOP-FOR-AS-TUPLES</link></member>
    <member><link hovertext="(MAP-QUERY OUTPUT-TYPE-SPEC FUNCTION QUERY-EXPRESSION &amp; DATABASE RESULT-TYPES" linkend="map-query">MAP-QUERY</link></member>
    <member><link hovertext="(PREPARE-SQL SQL-STMT TYPES &amp;KEY (DATABASE *DEFAULT-DATABASE*) (RESULT-TYPES :AUTO) FIELD-NAMES) [function]" linkend="prepare-sql">PREPARE-SQL</link></member>
    <member><link hovertext="(PROBE-DATABASE CONNECTION-SPEC &amp;KEY DATABASE-TYPE) [function]" linkend="probe-database">PROBE-DATABASE</link></member>
    <member><link hovertext="(QUERY QUERY-EXPRESSION &amp;KEY DATABASE RESULT-TYPES FLATP FIELD-NAMES) [generic]" linkend="query">QUERY</link></member>
    <member><link hovertext="(READ-LARGE-OBJECT OBJECT-ID &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="read-large-object">READ-LARGE-OBJECT</link></member>
    <member><link hovertext="(RECONNECT &amp;KEY (DATABASE *DEFAULT-DATABASE*) (ERROR NIL) (FORCE T)) [function]" linkend="reconnect">RECONNECT</link></member>
    <member><link hovertext="(RESTORE-SQL-READER-SYNTAX-STATE ) [macro]" linkend="restore-sql-reader-syntax-state">RESTORE-SQL-READER-SYNTAX-STATE</link></member>
    <member><link hovertext="(ROLLBACK &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="rollback">ROLLBACK</link></member>
    <member><link hovertext="(RUN-PREPARED-SQL PREPARED-STMT) [function]" linkend="run-prepared-sql">RUN-PREPARED-SQL</link></member>
    <member><link hovertext="(SELECT &amp;REST SELECT-ALL-ARGS) [function]" linkend="select">SELECT</link></member>
    <member><link hovertext="(SEQUENCE-EXISTS-P NAME &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="sequence-exists-p">SEQUENCE-EXISTS-P</link></member>
    <member><link hovertext="(SEQUENCE-LAST NAME &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="sequence-last">SEQUENCE-LAST</link></member>
    <member><link hovertext="(SEQUENCE-NEXT NAME &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="sequence-next">SEQUENCE-NEXT</link></member>
    <member><link hovertext="(SET-AUTOCOMMIT VALUE &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="set-autocommit">SET-AUTOCOMMIT</link></member>
    <member><link hovertext="(SET-SEQUENCE-POSITION NAME POSITION &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="set-sequence-position">SET-SEQUENCE-POSITION</link></member>
    <member><link hovertext="(SQL &amp;REST ARGS) [function]" linkend="sql">SQL</link></member>
    <member><link hovertext="(SQL-EXPRESSION &amp;KEY STRING TABLE ALIAS ATTRIBUTE TYPE) [function]" linkend="sql-expression">SQL-EXPRESSION</link></member>
    <member><link hovertext="(SQL-OPERATION OPERATION &amp;REST REST) [function]" linkend="sql-operation">SQL-OPERATION</link></member>
    <member><link hovertext="(SQL-OPERATOR OPERATION) [function]" linkend="sql-operator">SQL-OPERATOR</link></member>
    <member><link hovertext="(SQL-RECORDING-P &amp;KEY (TYPE :COMMANDS) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="sql-recording-p">SQL-RECORDING-P</link></member>
    <member><link hovertext="(SQL-STREAM &amp;KEY (TYPE :COMMANDS) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="sql-stream">SQL-STREAM</link></member>
    <member><link hovertext="(START-SQL-RECORDING &amp;KEY (TYPE :COMMANDS) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="start-sql-recording">START-SQL-RECORDING</link></member>
    <member><link hovertext="(START-TRANSACTION &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="start-transaction">START-TRANSACTION</link></member>
    <member><link hovertext="(STATUS &amp;OPTIONAL FULL) [function]" linkend="status">STATUS</link></member>
    <member><link hovertext="(STOP-SQL-RECORDING &amp;KEY (TYPE :COMMANDS) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="stop-sql-recording">STOP-SQL-RECORDING</link></member>
    <member><link hovertext="(TABLE-EXISTS-P NAME &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="table-exists-p">TABLE-EXISTS-P</link></member>
    <member><link hovertext="(TRUNCATE-DATABASE &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="truncate-database">TRUNCATE-DATABASE</link></member>
    <member><link hovertext="(UPDATE-INSTANCE-FROM-RECORDS OBJECT &amp;KEY DATABASE) [generic]" linkend="update-instance-from-records">UPDATE-INSTANCE-FROM-RECORDS</link></member>
    <member><link hovertext="(UPDATE-OBJECTS-JOINS OBJECTS &amp;KEY (SLOTS T) (FORCE-P T) CLASS-NAME (MAX-LEN *DEFAULT-UPDATE-OBJECTS-MAX-LEN*)) [function]" linkend="update-objects-joins">UPDATE-OBJECTS-JOINS</link></member>
    <member><link hovertext="(UPDATE-RECORD-FROM-SLOT OBJECT SLOT &amp;KEY DATABASE) [generic]" linkend="update-record-from-slot">UPDATE-RECORD-FROM-SLOT</link></member>
    <member><link hovertext="(UPDATE-RECORD-FROM-SLOTS OBJECT SLOTS &amp;KEY DATABASE) [generic]" linkend="update-record-from-slots">UPDATE-RECORD-FROM-SLOTS</link></member>
    <member><link hovertext="(UPDATE-RECORDS TABLE &amp;KEY (ATTRIBUTES NIL) (VALUES NIL) (AV-PAIRS NIL) (WHERE NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="update-records">UPDATE-RECORDS</link></member>
    <member><link hovertext="(UPDATE-RECORDS-FROM-INSTANCE OBJECT &amp;KEY DATABASE) [generic]" linkend="update-records-from-instance">UPDATE-RECORDS-FROM-INSTANCE</link></member>
    <member><link hovertext="(UPDATE-SLOT-FROM-RECORD OBJECT SLOT &amp;KEY DATABASE) [generic]" linkend="update-slot-from-record">UPDATE-SLOT-FROM-RECORD</link></member>
    <member><link hovertext="(VIEW-EXISTS-P NAME &amp;KEY (OWNER NIL) (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="view-exists-p">VIEW-EXISTS-P</link></member>
    <member><link hovertext="(WITH-DATABASE DB-VAR CONNECTION-SPEC &amp;REST CONNECT-ARGS &amp;BODY BODY) [macro]" linkend="with-database">WITH-DATABASE</link></member>
    <member><link hovertext="(WITH-DEFAULT-DATABASE DATABASE &amp;REST BODY) [macro]" linkend="with-default-database">WITH-DEFAULT-DATABASE</link></member>
    <member><link hovertext="(WITH-TRANSACTION &amp;KEY (DATABASE '*DEFAULT-DATABASE*) &amp;REST BODY) [macro]" linkend="with-transaction">WITH-TRANSACTION</link></member>
    <member><link hovertext="(WRITE-LARGE-OBJECT OBJECT-ID DATA &amp;KEY (DATABASE *DEFAULT-DATABASE*)) [function]" linkend="write-large-object">WRITE-LARGE-OBJECT</link></member>
  </simplelist>
</refsect1>
</refentry>
</reference> 
